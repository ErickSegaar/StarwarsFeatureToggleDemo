# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
- stage: Build
  displayName: Build Stage
  jobs:
  - job:
    displayName: Build job
    steps:
    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: DotNetCoreCLI@2
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: True

    # this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
        artifactName: 'StarwarsDemo'
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  variables: {ConnectionStrings.AppConfig: "$(AzureAppConfigurationUrl)"}
  jobs:
  - deployment: Deploy
    displayName: Deploy job
    environment: Dev
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'StarwarsDemo'
              appType: 'webApp'
              WebAppName: 'StarwarsDemoSwapi'
              packageForLinux: '$(Build.ArtifactStagingDirectory)/../StarwarsDemo/Starwars*.zip'
              JSONFiles: '**/appsettings.json'
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'StarwarsDemo'
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az appconfig kv set `
                    --name StarwarsConfiguration `
                    --key .appconfig.featureflag/UseImprovedStarshipProvider `
                    --value '"{\"id\":\"UseImprovedStarshipProvider\",\"description\":\"'When enabled the new improved client to swapi.io will be used, when disabled the incomplete old hardconfigured data will be used'\",\"enabled\":true,\"label\":null,\"conditions\":{\"client_filters\":[{\"name\":\"Microsoft.Percentage\",\"parameters\":{\"value\":\"0\"}}]}}"' `
                    --content-type "application/vnd.microsoft.appconfig.ff+json;charset=utf-8" `
                    --yes
